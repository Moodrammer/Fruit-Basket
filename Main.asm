;------------------------------------------MACRO-------------------------------------
;PRINTS A STRING KNOWING ITS SIZE
PRINT_MESSAGE MACRO MESSAGE, MESSAGE_SIZE, MESSAGE_X, MESSAGE_Y, MESSAGE_COLOR
    MOV AH,13H
    MOV AL,0
    MOV BH,0
    MOV BL, MESSAGE_COLOR
    MOV CX, MESSAGE_SIZE
    MOV DH, MESSAGE_Y
    MOV DL, MESSAGE_X
    MOV BP, OFFSET MESSAGE
    INT 10H

ENDM PRINT_MESSAGE 
;------------------------------------------------------------------------------------
.Model small
.STACK 64
.DATA
;PLAYER FRUIT BASKET
ORANGE DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 216, 121, 216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 194, 216, 216, 216, 216, 216, 216, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 216
DB 216, 121, 216, 42, 216, 121, 41, 216, 121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 41, 216, 121, 121, 41, 12, 41, 12, 119, 12, 41, 216, 215
DB 216, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 191, 216, 216
DB 144, 41, 41, 12, 191, 216, 42, 12, 42, 216, 216, 216, 41, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 41, 42, 41, 12, 41, 41, 12, 42, 216, 121, 41, 12, 41, 41, 12
DB 42, 216, 12, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 12, 41, 12, 41, 42
DB 12, 41, 41, 12, 41, 12, 41, 41, 12, 41, 12, 41, 30, 30, 12, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 12, 41, 12, 41, 12, 41, 12, 41, 12, 41, 41, 42, 12, 42, 41, 12
DB 41, 42, 30, 30, 41, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 41, 42, 12, 41, 42
DB 41, 12, 42, 12, 12, 41, 41, 12, 41, 42, 12, 41, 12, 30, 30, 41, 0, 0, 0, 0
DB 0, 0, 0, 12, 12, 41, 12, 41, 12, 41, 12, 41, 41, 41, 42, 41, 12, 41, 12, 41
DB 41, 12, 41, 41, 30, 12, 0, 0, 0, 0, 0, 0, 12, 41, 41, 17, 17, 17, 15, 17
DB 15, 17, 15, 17, 17, 17, 17, 17, 15, 17, 15, 17, 15, 12, 30, 30, 41, 0, 0, 0
DB 0, 0, 41, 42, 12, 17, 17, 17, 17, 15, 15, 15, 17, 41, 12, 17, 17, 17, 17, 15
DB 15, 15, 17, 41, 41, 15, 41, 0, 0, 0, 0, 0, 6, 12, 41, 12, 17, 17, 17, 17
DB 17, 17, 12, 41, 41, 12, 17, 17, 17, 17, 17, 17, 41, 12, 42, 12, 41, 0, 0, 0
DB 0, 0, 6, 41, 42, 41, 41, 17, 17, 17, 17, 41, 42, 41, 12, 41, 41, 17, 17, 17
DB 17, 12, 42, 12, 41, 41, 12, 0, 0, 0, 0, 0, 6, 12, 41, 12, 12, 41, 12, 41
DB 12, 41, 12, 12, 41, 42, 12, 41, 12, 41, 12, 41, 41, 41, 41, 12, 41, 0, 0, 0
DB 0, 0, 6, 41, 12, 41, 41, 42, 41, 12, 42, 12, 41, 42, 12, 41, 12, 42, 41, 12
DB 42, 41, 12, 12, 41, 42, 12, 0, 0, 0, 0, 0, 6, 6, 41, 12, 41, 12, 42, 41
DB 41, 41, 12, 41, 41, 12, 41, 12, 41, 41, 12, 41, 42, 41, 12, 41, 41, 0, 0, 0
DB 0, 0, 0, 6, 6, 42, 41, 12, 41, 12, 42, 12, 41, 12, 41, 42, 12, 41, 42, 12
DB 41, 12, 41, 12, 41, 12, 0, 0, 0, 0, 0, 0, 0, 6, 4, 12, 41, 12, 41, 41
DB 12, 41, 12, 42, 41, 12, 41, 41, 12, 41, 42, 41, 12, 6, 42, 41, 0, 0, 0, 0
DB 0, 0, 0, 0, 6, 6, 12, 41, 42, 12, 41, 42, 41, 12, 41, 12, 41, 12, 42, 41
DB 12, 12, 41, 12, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 6, 12, 41, 12
DB 41, 12, 41, 42, 12, 41, 42, 41, 12, 41, 41, 41, 42, 41, 12, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 6, 6, 6, 12, 42, 41, 12, 41, 12, 42, 41, 12, 12, 41, 12
DB 42, 12, 12, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 6, 41
DB 12, 42, 12, 41, 41, 12, 41, 41, 42, 41, 12, 41, 41, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 41, 41, 12, 41, 41, 12, 42, 12, 41
DB 12, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12
DB 6, 12, 6, 41, 12, 42, 41, 12, 41, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 136, 6, 6, 12, 6, 41, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

BASKET DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66
DB 65, 66, 65, 66, 65, 66, 65, 43, 65, 66, 43, 65, 66, 65, 66, 65, 66, 65, 66, 65
DB 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 65, 66, 0, 0, 0
DB 6, 138, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115
DB 6, 115, 6, 115, 6, 115, 6, 138, 115, 6, 138, 6, 115, 6, 115, 6, 115, 6, 115, 6
DB 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 115, 6, 138, 6, 138, 0
DB 138, 138, 6, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138
DB 138, 138, 138, 138, 138, 138, 138, 138, 6, 138, 138, 6, 138, 138, 6, 138, 138, 138, 6, 138
DB 138, 138, 6, 138, 138, 138, 6, 138, 138, 138, 6, 138, 138, 138, 6, 138, 138, 6, 138, 0
DB 6, 138, 138, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6
DB 6, 6, 6, 6, 17, 17, 15, 6, 138, 6, 138, 17, 17, 15, 138, 6, 6, 138, 138, 6
DB 6, 138, 138, 6, 6, 138, 138, 6, 6, 138, 138, 6, 6, 138, 138, 6, 6, 138, 6, 0
DB 0, 0, 65, 66, 65, 66, 65, 138, 138, 138, 138, 138, 65, 66, 65, 66, 65, 138, 138, 138
DB 138, 138, 65, 15, 17, 17, 15, 15, 138, 6, 15, 17, 17, 15, 15, 65, 66, 6, 138, 138
DB 138, 6, 65, 66, 65, 66, 65, 138, 138, 6, 138, 138, 65, 66, 65, 66, 65, 0, 0, 0
DB 0, 0, 43, 65, 66, 65, 66, 6, 138, 6, 138, 6, 66, 65, 66, 65, 66, 6, 138, 6
DB 138, 6, 66, 15, 15, 15, 15, 15, 6, 138, 15, 15, 15, 15, 15, 66, 65, 138, 6, 138
DB 6, 115, 66, 65, 65, 43, 66, 6, 6, 138, 6, 6, 66, 65, 43, 65, 66, 0, 0, 0
DB 0, 0, 65, 66, 65, 43, 65, 138, 6, 138, 6, 115, 65, 43, 65, 43, 65, 138, 6, 138
DB 6, 115, 65, 15, 15, 15, 15, 15, 138, 138, 15, 15, 15, 15, 15, 43, 65, 6, 138, 6
DB 138, 6, 65, 65, 43, 65, 65, 138, 138, 6, 138, 138, 65, 43, 65, 66, 65, 0, 0, 0
DB 0, 0, 66, 65, 43, 65, 66, 6, 138, 6, 138, 138, 65, 65, 66, 65, 66, 6, 138, 6
DB 138, 138, 66, 65, 15, 15, 15, 138, 6, 6, 138, 15, 15, 15, 65, 65, 66, 115, 138, 6
DB 138, 138, 66, 43, 65, 66, 65, 6, 138, 138, 6, 138, 65, 65, 66, 43, 65, 0, 0, 0
DB 0, 0, 65, 66, 65, 65, 65, 115, 138, 138, 6, 6, 66, 65, 43, 65, 65, 115, 138, 138
DB 6, 6, 65, 43, 65, 66, 65, 6, 138, 138, 6, 138, 65, 66, 66, 43, 65, 6, 138, 138
DB 6, 6, 65, 65, 66, 43, 65, 115, 6, 138, 6, 6, 66, 43, 65, 65, 66, 0, 0, 0
DB 0, 0, 6, 115, 6, 115, 6, 65, 66, 65, 66, 65, 115, 6, 138, 115, 6, 65, 66, 65
DB 66, 65, 138, 138, 115, 6, 115, 66, 65, 66, 65, 66, 6, 115, 6, 138, 115, 65, 66, 65
DB 66, 65, 6, 115, 6, 138, 6, 65, 66, 65, 66, 65, 6, 138, 138, 6, 115, 0, 0, 0
DB 0, 0, 138, 6, 138, 138, 115, 66, 65, 43, 66, 65, 6, 138, 6, 138, 115, 66, 65, 43
DB 65, 66, 6, 138, 6, 138, 138, 65, 43, 65, 43, 65, 6, 138, 138, 138, 6, 66, 65, 43
DB 65, 66, 138, 138, 138, 138, 115, 66, 65, 43, 66, 65, 138, 138, 6, 138, 138, 0, 0, 0
DB 0, 0, 138, 138, 6, 6, 138, 65, 43, 65, 65, 43, 138, 138, 138, 6, 138, 65, 43, 65
DB 65, 43, 138, 6, 138, 6, 6, 66, 65, 66, 65, 66, 115, 138, 6, 6, 138, 65, 43, 65
DB 65, 43, 138, 6, 6, 138, 6, 65, 66, 65, 65, 43, 138, 6, 138, 6, 6, 0, 0, 0
DB 0, 0, 6, 138, 138, 138, 6, 65, 65, 66, 65, 65, 6, 6, 138, 138, 6, 65, 66, 65
DB 66, 65, 6, 138, 6, 138, 138, 65, 43, 65, 65, 65, 6, 138, 138, 138, 6, 65, 66, 65
DB 66, 65, 6, 138, 138, 6, 138, 65, 43, 65, 66, 65, 6, 138, 6, 138, 138, 0, 0, 0
DB 0, 0, 138, 6, 138, 6, 115, 66, 65, 43, 66, 66, 138, 138, 6, 6, 138, 43, 65, 65
DB 43, 65, 138, 6, 138, 138, 6, 66, 65, 65, 43, 66, 138, 6, 138, 6, 115, 66, 65, 65
DB 43, 65, 138, 138, 6, 138, 6, 66, 65, 65, 43, 66, 138, 6, 138, 138, 6, 0, 0, 0
DB 0, 0, 65, 66, 65, 66, 65, 115, 6, 138, 6, 115, 65, 66, 65, 66, 65, 138, 138, 6
DB 138, 115, 65, 66, 65, 66, 65, 138, 115, 6, 138, 115, 65, 66, 65, 66, 65, 6, 115, 6
DB 138, 115, 65, 66, 65, 66, 65, 138, 115, 6, 138, 115, 65, 66, 65, 66, 65, 0, 0, 0
DB 0, 0, 66, 43, 65, 65, 66, 6, 138, 138, 138, 6, 65, 43, 65, 65, 66, 6, 6, 138
DB 6, 138, 66, 43, 65, 43, 65, 6, 138, 138, 6, 138, 65, 43, 65, 65, 66, 115, 138, 138
DB 6, 138, 66, 43, 65, 65, 43, 6, 138, 138, 6, 138, 65, 43, 65, 43, 65, 0, 0, 0
DB 0, 0, 65, 65, 66, 43, 65, 138, 6, 6, 138, 138, 65, 65, 66, 43, 65, 138, 138, 6
DB 138, 6, 65, 65, 65, 66, 65, 115, 6, 138, 6, 138, 65, 65, 43, 65, 65, 6, 6, 138
DB 6, 138, 65, 65, 43, 65, 65, 138, 6, 138, 6, 138, 65, 65, 66, 65, 66, 0, 0, 0
DB 0, 0, 65, 43, 65, 65, 66, 6, 138, 138, 6, 6, 66, 43, 65, 65, 66, 138, 6, 138
DB 6, 138, 43, 66, 65, 43, 66, 138, 138, 6, 138, 6, 66, 66, 65, 43, 66, 138, 138, 138
DB 6, 138, 43, 66, 65, 66, 66, 138, 6, 138, 6, 138, 43, 66, 65, 43, 65, 0, 0, 0
DB 0, 0, 66, 65, 65, 43, 65, 138, 138, 6, 138, 138, 65, 65, 65, 43, 65, 6, 138, 6
DB 138, 138, 65, 65, 66, 65, 65, 6, 6, 138, 138, 115, 65, 43, 66, 65, 65, 138, 6, 6
DB 138, 6, 65, 65, 65, 43, 65, 6, 138, 138, 138, 6, 65, 65, 65, 66, 65, 0, 0, 0
DB 0, 0, 115, 6, 138, 138, 6, 65, 66, 65, 66, 65, 6, 115, 6, 138, 6, 65, 66, 65
DB 66, 65, 6, 115, 6, 115, 6, 65, 66, 65, 66, 65, 6, 138, 6, 115, 6, 65, 66, 65
DB 66, 65, 115, 6, 115, 138, 6, 65, 66, 65, 66, 65, 115, 6, 115, 6, 115, 0, 0, 0
DB 0, 0, 138, 138, 6, 138, 6, 66, 43, 65, 43, 65, 139, 138, 138, 6, 138, 66, 43, 65
DB 43, 65, 138, 6, 138, 138, 138, 66, 65, 43, 65, 66, 115, 138, 138, 138, 6, 66, 65, 43
DB 65, 66, 138, 138, 6, 138, 138, 66, 43, 65, 43, 65, 139, 138, 6, 138, 138, 0, 0, 0
DB 0, 0, 6, 138, 6, 138, 115, 65, 65, 65, 65, 66, 6, 6, 6, 138, 6, 65, 65, 65
DB 65, 66, 138, 138, 6, 6, 138, 43, 65, 65, 43, 65, 138, 6, 138, 6, 138, 43, 65, 65
DB 43, 65, 6, 6, 138, 6, 6, 65, 65, 65, 65, 66, 6, 6, 138, 138, 6, 0, 0, 0
DB 0, 0, 138, 6, 138, 138, 6, 65, 66, 66, 43, 65, 138, 138, 138, 138, 115, 65, 66, 66
DB 43, 65, 6, 6, 138, 138, 6, 65, 66, 65, 66, 65, 138, 6, 138, 6, 138, 65, 66, 65
DB 66, 65, 138, 138, 6, 138, 138, 65, 43, 66, 43, 65, 138, 138, 138, 6, 138, 0, 0, 0
DB 0, 0, 6, 138, 6, 6, 138, 66, 43, 65, 65, 66, 6, 6, 138, 6, 138, 66, 43, 65
DB 65, 66, 115, 138, 6, 138, 138, 65, 43, 65, 65, 43, 138, 6, 138, 138, 6, 65, 66, 43
DB 65, 66, 6, 138, 138, 6, 138, 66, 65, 65, 65, 66, 6, 6, 138, 6, 138, 0, 0, 0
DB 0, 0, 0, 0, 65, 66, 65, 65, 65, 66, 43, 65, 65, 66, 65, 66, 65, 65, 65, 66
DB 43, 65, 65, 66, 65, 66, 65, 66, 65, 43, 65, 65, 66, 65, 66, 65, 66, 43, 65, 65
DB 43, 65, 66, 65, 66, 65, 65, 43, 65, 66, 43, 65, 65, 66, 65, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 65, 43, 65, 43, 65, 65, 43, 66, 65, 43, 65, 43, 65, 43, 65
DB 65, 65, 43, 65, 65, 43, 65, 43, 66, 65, 66, 66, 65, 43, 65, 43, 65, 65, 65, 66
DB 65, 65, 65, 43, 65, 43, 66, 65, 43, 65, 65, 65, 43, 65, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

LEMON DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 168, 10, 168, 10, 168, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 10, 168, 10, 145, 168, 168, 10, 168
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10
DB 168, 10, 43, 14, 14, 14, 14, 14, 14, 168, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 168, 168, 10, 14, 14, 14, 43, 14, 44, 14, 43, 10
DB 145, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 168, 10
DB 43, 14, 43, 14, 14, 43, 14, 14, 14, 14, 168, 10, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 168, 145, 14, 14, 14, 14, 43, 14, 14, 14, 43, 14, 44
DB 14, 168, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 10, 14, 14
DB 43, 14, 43, 14, 14, 14, 43, 14, 14, 14, 14, 14, 10, 10, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 10, 14, 143, 143, 10, 168, 10, 168, 143, 14, 168, 10, 143, 143
DB 143, 143, 168, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 14, 10, 15
DB 15, 15, 15, 14, 14, 44, 14, 43, 15, 15, 15, 15, 168, 14, 14, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 14, 14, 168, 30, 15, 15, 15, 15, 30, 43, 14, 43, 15, 15, 15
DB 15, 15, 15, 168, 44, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14, 15, 15, 15
DB 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14, 0, 0, 0, 0
DB 0, 0, 0, 0, 14, 43, 14, 30, 15, 15, 15, 15, 15, 15, 15, 14, 30, 15, 15, 15
DB 15, 15, 15, 15, 14, 43, 14, 0, 0, 0, 0, 0, 0, 0, 43, 14, 14, 15, 15, 15
DB 17, 17, 17, 17, 15, 14, 15, 17, 17, 17, 17, 15, 15, 15, 14, 14, 14, 0, 0, 0
DB 0, 0, 0, 14, 14, 43, 14, 15, 15, 15, 17, 17, 15, 17, 30, 14, 15, 17, 17, 15
DB 17, 15, 15, 15, 43, 14, 43, 14, 0, 0, 0, 0, 0, 43, 43, 14, 14, 15, 15, 15
DB 17, 17, 17, 17, 15, 14, 15, 17, 17, 17, 17, 15, 15, 15, 14, 14, 14, 14, 0, 0
DB 0, 0, 0, 14, 14, 43, 14, 30, 15, 15, 17, 17, 17, 17, 15, 14, 30, 17, 17, 17
DB 17, 15, 15, 15, 14, 43, 14, 43, 0, 0, 0, 0, 0, 43, 43, 14, 14, 15, 15, 15
DB 17, 17, 17, 17, 15, 14, 15, 17, 17, 17, 17, 15, 15, 15, 14, 14, 14, 14, 0, 0
DB 0, 0, 0, 14, 14, 43, 14, 15, 15, 15, 17, 17, 17, 17, 30, 14, 15, 17, 17, 17
DB 17, 15, 15, 15, 43, 14, 43, 14, 0, 0, 0, 0, 0, 43, 43, 14, 14, 15, 15, 15
DB 17, 17, 17, 17, 15, 14, 15, 17, 17, 17, 17, 15, 15, 15, 14, 14, 14, 14, 0, 0
DB 0, 0, 0, 14, 14, 43, 14, 30, 15, 15, 17, 17, 17, 17, 15, 14, 30, 17, 17, 17
DB 17, 15, 15, 15, 14, 43, 14, 43, 0, 0, 0, 0, 0, 0, 43, 14, 43, 15, 15, 15
DB 17, 17, 17, 17, 15, 14, 15, 17, 17, 17, 17, 15, 15, 15, 14, 14, 14, 0, 0, 0
DB 0, 0, 0, 0, 14, 43, 14, 15, 15, 15, 15, 15, 15, 15, 30, 14, 15, 15, 15, 15
DB 15, 15, 15, 30, 14, 43, 14, 0, 0, 0, 0, 0, 0, 0, 0, 14, 43, 14, 15, 15
DB 15, 15, 15, 15, 14, 43, 14, 15, 15, 15, 15, 15, 15, 14, 14, 14, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 43, 14, 43, 14, 15, 15, 15, 15, 14, 14, 14, 14, 43, 15, 15
DB 15, 15, 14, 43, 14, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 14, 14, 14
DB 14, 14, 14, 43, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 43, 43, 43, 14, 43, 14, 14, 14, 14, 43, 14, 43, 14
DB 43, 14, 43, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 14
DB 14, 43, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 14, 43, 43, 14, 43, 43, 43, 43, 43
DB 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 14, 43, 14, 43, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

AVOCADO DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 15, 17, 17, 15, 71, 15, 17, 17, 15
DB 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71
DB 71, 15, 17, 17, 15, 71, 15, 17, 17, 15, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 15, 15, 15, 15, 71, 15, 15, 15, 15
DB 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 72, 71, 71
DB 71, 15, 15, 15, 30, 71, 15, 15, 15, 30, 71, 71, 71, 2, 2, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
DB 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71
DB 71, 71, 138, 139, 138, 138, 139, 138, 138, 71, 71, 71, 71, 71, 71, 2, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 71, 138, 138, 138, 138, 138, 138, 137, 138, 138
DB 71, 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 71
DB 138, 137, 138, 138, 138, 138, 138, 15, 138, 15, 138, 71, 71, 71, 71, 2, 2, 0, 0, 0
DB 0, 0, 0, 0, 2, 71, 71, 71, 71, 138, 138, 138, 138, 138, 138, 138, 138, 138, 15, 138
DB 138, 138, 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 138
DB 138, 138, 138, 138, 138, 138, 138, 138, 138, 15, 138, 138, 71, 71, 71, 71, 2, 0, 0, 0
DB 0, 0, 0, 0, 2, 71, 71, 71, 71, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138
DB 138, 138, 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 135
DB 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 71, 71, 71, 71, 2, 0, 0, 0
DB 0, 0, 0, 0, 2, 71, 71, 71, 71, 136, 136, 138, 138, 138, 138, 138, 138, 138, 138, 138
DB 138, 138, 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 136
DB 136, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 71, 71, 71, 2, 2, 0, 0, 0
DB 0, 0, 0, 0, 0, 2, 71, 71, 71, 136, 136, 136, 137, 138, 138, 138, 138, 138, 138, 138
DB 138, 138, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71
DB 136, 136, 136, 137, 138, 138, 138, 138, 138, 138, 139, 71, 71, 71, 2, 2, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 136, 136, 136, 137, 136, 136, 136, 137, 138
DB 71, 71, 71, 71, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 71, 71
DB 71, 71, 136, 136, 136, 136, 136, 136, 136, 71, 71, 71, 71, 2, 2, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71
DB 71, 71, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2
DB 2, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 2, 2, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 71, 71, 71, 71, 71, 71, 71, 2
DB 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

TOMATO DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 121, 121, 121, 121, 121, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193
DB 193, 216, 121, 216, 193, 121, 121, 121, 121, 121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 194, 211, 121, 121, 212, 4, 121, 122, 121, 4, 216, 121
DB 121, 121, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 114, 113
DB 194, 213, 40, 40, 4, 121, 215, 40, 113, 212, 113, 113, 40, 40, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 112, 4, 40, 186, 215, 40, 40, 4, 4, 210, 4, 40, 40, 4
DB 40, 40, 15, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 40, 40, 40, 4
DB 4, 40, 4, 40, 4, 40, 4, 4, 40, 40, 4, 4, 40, 15, 40, 40, 0, 0, 0, 0
DB 0, 0, 0, 0, 184, 40, 4, 4, 4, 12, 12, 12, 12, 4, 40, 4, 40, 40, 4, 12
DB 64, 12, 12, 40, 15, 40, 40, 0, 0, 0, 0, 0, 0, 40, 4, 40, 4, 40, 64, 15
DB 15, 15, 30, 39, 4, 40, 4, 4, 12, 15, 30, 15, 30, 12, 15, 15, 40, 40, 0, 0
DB 0, 0, 40, 4, 4, 40, 4, 64, 15, 30, 30, 30, 15, 15, 41, 4, 40, 12, 15, 30
DB 30, 30, 30, 15, 12, 12, 29, 40, 40, 0, 0, 0, 184, 4, 40, 4, 12, 15, 30, 30
DB 30, 30, 30, 15, 63, 4, 39, 15, 30, 30, 30, 30, 30, 15, 28, 4, 12, 4, 40, 0
DB 0, 0, 112, 4, 40, 4, 87, 15, 30, 15, 15, 15, 30, 30, 30, 4, 65, 15, 30, 30
DB 30, 15, 30, 30, 15, 12, 4, 4, 184, 0, 0, 0, 112, 4, 4, 40, 30, 30, 30, 30
DB 15, 15, 15, 15, 86, 40, 88, 15, 30, 15, 30, 30, 30, 30, 30, 39, 4, 40, 184, 0
DB 0, 0, 4, 4, 40, 40, 30, 30, 30, 15, 15, 15, 15, 15, 15, 4, 15, 15, 28, 15
DB 27, 15, 30, 30, 30, 41, 4, 40, 4, 0, 0, 0, 112, 4, 40, 40, 86, 15, 15, 17
DB 17, 17, 17, 15, 30, 40, 15, 29, 17, 17, 17, 17, 30, 30, 15, 39, 4, 4, 4, 0
DB 0, 0, 4, 4, 40, 4, 29, 15, 17, 17, 17, 15, 17, 17, 30, 4, 15, 17, 17, 17
DB 15, 17, 17, 30, 15, 6, 40, 40, 4, 0, 0, 0, 112, 4, 4, 40, 86, 15, 17, 17
DB 17, 17, 15, 17, 30, 40, 15, 17, 17, 17, 17, 15, 17, 30, 15, 39, 4, 4, 4, 0
DB 0, 0, 184, 4, 4, 40, 30, 15, 17, 17, 17, 17, 17, 17, 15, 4, 15, 17, 17, 17
DB 17, 17, 17, 30, 15, 12, 4, 40, 4, 0, 0, 0, 184, 4, 4, 40, 30, 15, 17, 17
DB 17, 17, 17, 17, 30, 40, 29, 17, 17, 17, 17, 17, 17, 30, 30, 39, 4, 40, 184, 0
DB 0, 0, 184, 184, 4, 4, 88, 15, 15, 17, 17, 17, 17, 15, 12, 4, 63, 15, 17, 17
DB 17, 17, 30, 15, 65, 4, 40, 4, 184, 0, 0, 0, 184, 184, 4, 4, 12, 15, 15, 15
DB 15, 15, 15, 15, 40, 4, 40, 15, 15, 15, 15, 15, 15, 15, 39, 4, 40, 4, 40, 0
DB 0, 0, 184, 184, 112, 4, 4, 12, 30, 15, 15, 15, 88, 39, 4, 40, 4, 12, 30, 15
DB 15, 15, 87, 12, 4, 40, 4, 112, 0, 0, 0, 0, 0, 184, 112, 4, 4, 4, 40, 64
DB 63, 12, 4, 4, 40, 4, 40, 4, 40, 64, 88, 12, 4, 4, 40, 4, 4, 0, 0, 0
DB 0, 0, 0, 0, 184, 112, 4, 4, 4, 4, 4, 4, 40, 40, 4, 40, 4, 40, 4, 4
DB 4, 4, 40, 40, 4, 40, 184, 0, 0, 0, 0, 0, 0, 0, 0, 184, 112, 4, 4, 40
DB 4, 40, 40, 4, 4, 40, 4, 40, 4, 40, 40, 40, 4, 4, 40, 184, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 184, 112, 4, 4, 4, 4, 40, 4, 40, 4, 40, 4, 40, 4
DB 4, 4, 40, 40, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 112, 112
DB 4, 4, 40, 40, 4, 40, 4, 40, 4, 40, 40, 4, 4, 184, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 184, 112, 4, 4, 4, 40, 40, 4, 40, 4
DB 40, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 184, 184, 184, 184, 184, 184, 184, 40, 4, 112, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

TREE DB 119, 192, 119, 192, 119, 192, 119, 192, 119, 192, 192, 119, 192, 119, 192, 119, 192, 119, 192, 119
DB 119, 192, 119, 192, 119, 192, 119, 192, 119, 192, 192, 119, 192, 119, 192, 119, 192, 119, 192, 119
DB 119, 192, 119, 192, 119, 192, 119, 192, 119, 192, 192, 119, 192, 119, 192, 119, 192, 119, 192, 119
DB 119, 192, 119, 192, 119, 192, 119, 192, 119, 192, 192, 119, 192, 119, 192, 119, 192, 119, 192, 119
DB 119, 0, 119, 192, 119, 0, 119, 0, 119, 0, 119, 0, 119, 0, 119, 0, 119, 0, 0, 119

;PLAYING AREA BOUNDARIES
DOWN_BOUNDARY EQU 180
UPPER_BOUNDARY EQU 25
RIGHT_BOUNDARY EQU 319
LEFT_BOUNDARY EQU 0

;FOR CREATING REAL TIME LOOPS 
PREV_SYS_SEC DB 0
SEED DB ? ;RANDOM NUMBER SEED

FRUITS_START_FALLING_POS EQU UPPER_BOUNDARY + 11

FRUIT_STARTPOS_X DW 10
FRUIT_STARTPOS_Y DW FRUITS_START_FALLING_POS


CURRENT_FRUIT DW 2  ;1: TOMATO 2: ORANGE 3: LEMON 4: AVOCADO
CURRENT_FRUIT_STATUS DB 0 ;0:NO FRUIT 1: A FRUIT IS STILL FALLING 

BASKET_STARTPOS_X DW 160
BASKET_STARTPOS_Y DW 120
BASKET_PREV_X DW 160 ;KEEPS TRACK OF THE BASKETS PREVIOS POSITION FOR CLEARING
BASKET_HEIGHT DW 30 ;DESCRIBES THE BASKET HEIGHT FROM THE GROUND :TO CHECK FOR COLLISION


BASKET_SIZE DW 60
FRUIT_SIZE DW 30
TREE_SIZE DW 10

;INTERFACE MESSAGES
WEL_MES DB 'WELCOME TO FRUIT BASKET ',2
WEL_SIZE DW 25
PRESS_MES DB 'PRESS ANY KEY TO START'
PRESS_MES_SIZE DW 22
ESC_MES DB 'PRESS ESC TO EXIT'
ESC_MES_SIZE DW 17
INST_MES DB 'PRESS I FOR INSTRUCTIONS'
INST_MES_SIZE DW 24

WON_MES DB ' YOU WON ', 2 ,' '
WON_MES_SIZE DW 11
LOSE_MES DB ' YOU LOST ', 
LOSE_MES_SIZE DW 10
MES_COLOR DB 1

TOM_WRD DB 'TOMATO'
TOM_WRD_SIZE DW 6
ORNG_WRD DB 'ORANGE'
ORNG_WRD_SIZE DW 6
LMN_WRD DB 'LEMON'
LMN_WRD_SIZE DW 5
AVC_WRD DB 'AVOCADO'
AVC_WRD_SIZE DW 7
RET_FRM_INS_MES DB 'PRESS ANY KEY TO RETURN'
RET_FRM_INS_MES_SIZE DW 23

;HOW TO PLAY MESSAGES
MES DB 2,' Welcome to the Fruit Basket Game !! ',2,13,10
    DB 'The aim of this game is to teach children to differentiate between fruits ',13,10
    DB 'and their colors in an entertaining way by collecting randomly falling',10,13
    DB 'fruits in a basket ',2,13,10
    DB 'Game Rules:',13,10
    DB 9,'1. Move the basket using the left ',17,' and right ',16,' arrow keys ',13,10
    DB 9,'2. A Message asking the player to collect a certain fruit with a',13,10
    DB 9,'certain color appears at the bottom bar of the screen',13,10
    DB 9,'3. The player should collect these fruits only and skip the rest of',13,10
    DB 9,'falling fruits',13,10
    DB 9,'4. When the player collects a correct fruit he gains 10 points',13,10
    DB 9,'5. If the player collects a wrong fruit or skips a right one,',13,10
    DB 9,'he will lose a life',13,10
    DB 9,'6.The players goal is to survive for 60 seconds without losing ',13,10
    DB 9,'all his lives',13,10
    DB 9,'7. Press Esc key during playing to return to main menu',13,10,13
    DB 9,9,'Press any key to continue ',2,'$'


MES1 DB 'COLLECT ALL RED TOMATOES ', 2,'  '
MES1_SIZE DW 28
MES2 DB 'COLLECT ALL ORANGE ORANGES ', 2,'$'
MES2_SIZE DW 28
MES3 DB 'COLLECT ALL YELLOW LEMON ', 2,'  '
MES3_SIZE DW 28
MES4 DB 'COLLECT ALL GREEN AVOCADOS ', 2,'$'
MES4_SIZE DW 28
;MES_COUNTER DB 15

LIVES_WORD DB 'LIVES : '
LIVES_WORD_LEN DW 8
SCORE_WORD DB 'SCORE : '
SCORE_WORD_LEN DW 8


CURR_MES_NUM DW 1  ;THE NUMBER OF THE MES TO BE PRINTED
RANDOM_NUMBER DW ?
H2A_STRING_SIZE DW ?

LIVES DW 3 ;THE PLAYERS LIVES IF IT REACHES 0 THE PLAYER LOSES THE GAME
LIVES_STRING DB 3 DUP('$') ;TO_PRINT_ON_CONSOLE
SCORE DW 0 ;DETERMINES THE PLAYERS SCORE
SCORE_STRING DB 6 DUP('$')
TIME DW 60 ;GAME TIME 200 SECONDS
TIME_STRING DB 4 DUP('$')
CLEAR_STRING DB '   '
CLEAR_STRING_SIZE DW 3
;DEFINE THE UPPER AND LOWER BYTES OF THE DELAY
LOOP_DEL_UPPER DW 03H
LOOP_DEL_LOWER DW 0D90H

PLAYER_LOST DB 0 ;0: PLAYER DIDNOT LOSE 1:PLAYER_LOST
PLAYER_WON DB 0 ;0: PLAYER DIDNOT WIN 1:PLAYER_WON
EXIT_STATUS DB 0 ;0 : DON'T EXIT  1: EXIT PROGRAM
.CODE
MAIN PROC FAR
    MOV AX, @DATA
    MOV DS, AX
    MOV ES, AX

    BEGIN_GAME:
    ;CALL INTERFACE FUNCTION
    CALL INTERFACE
    CMP EXIT_STATUS, 1
    JE END_GAME_PATH
    ;OPEN GRAPHICS MODE
    MOV AX,0013H
    INT 10H

    ;GET CURRENT SYSTEM TIME
    MOV AH, 2CH
    INT 21H
    MOV PREV_SYS_SEC, DH
    MOV SEED, DH ;ASSIGN THE SEED FOR THE FIRST TIME ONLY 
    ;PRINT THE TIME
    CALL PRINT_TIME

    ;INITIALIZING THE SCENE
    CALL DRAW_BCGRND
    CALL DRAW_TREE
    CALL DRAW_BASKET
    
    ;SELECT A MESSAGE RANDOMLY FOR THE USER
    CALL SELECT_MESSAGE
    
    ;PRINT LIVES_WORD ON THE SCREEN
    PRINT_MESSAGE LIVES_WORD,LIVES_WORD_LEN,2,1,0FH
    ;PRINT SCORE_WORD
    PRINT_MESSAGE SCORE_WORD,SCORE_WORD_LEN,28,1,0FH 
    
    
    ;JUMP TO HANDLE JUMP OUT OF RANGE 
    JMP SKIP_END_GAME_PATH
    END_GAME_PATH: JMP END_GAME 
    SKIP_END_GAME_PATH:

    MAIN_LOOP:
        ;HAS A SECOND PASSED
        XOR AL,AL
        MOV AH, 2CH
        INT 21H
        CMP DH, PREV_SYS_SEC
        JE CONT_MAIN_LOOP
            ;MOV THE NEW SYSTEM SECOND TO PREV_SYSTEM_SECOND
            MOV PREV_SYS_SEC, DH
            MOV AL, PREV_SYS_SEC
            
            ;IF YES DECREMENT THE TIME
            SUB TIME, 1
            CALL PRINT_TIME
            ;MAKE THE GAME FASTER
            CMP TIME, 30
            JNE SKIP_ACCELERATING
                MOV LOOP_DEL_UPPER, 01H
                MOV LOOP_DEL_LOWER, 0E848H
            SKIP_ACCELERATING: 
            ;THE GAME ENDS WHEN THE PLAYER REACHES TIME = 0 WITHOUT LOSING
            CMP TIME, 0
            JNE STILL_RUNING
                MOV PLAYER_WON, 1
                JMP CHK_PLR_WON
            STILL_RUNING:
        
        ;DEC MES COUNTER TO CHANGE MESSAGE EVERY 30 SECONDS
            ; DEC MES_COUNTER
            ; CMP MES_COUNTER, 0
            ; JNE SKIP_CHANGING_MES
            ;     ;CHANGE THE MESSAGE
            ;     CALL SELECT_MESSAGE
            ;     ;RESET THE MESSAGE COUNTER
            ;     MOV MES_COUNTER, 15
            ; SKIP_CHANGING_MES:    
        
        ;IF NO CONTINUE TO THE MAIN LOOP
        CONT_MAIN_LOOP:
        ;CHECK FOR USER INPUT
        CALL GET_USR_INPUT
        ;DRAW THE BASKET IN ITS NEW POSTION
        CALL DRAW_BASKET
        
        ;CHECK IF NO CURRENT FRUIT EXISTING
        CMP CURRENT_FRUIT_STATUS, 0
        JNE STILL_FALLING
            ;GET A RANDOM FRUIT_STARTPOS_X
            MOV SI , 280 ;UPPER VALUE
            MOV DI , 1 ;LOWER VALUE
            CALL GETRAND
            MOV DX, RANDOM_NUMBER
            MOV FRUIT_STARTPOS_X,DX
            
            ;GET A RANDOM CURRENT_FRUIT_VALUE
            MOV SI , 5 ;UPPER VALUE
            MOV DI , 1 ;LOWER VALUE
            CALL GETRAND
            ;IF THE RANDOM NUBER IS GREATER THAN 4 SET TO 4 TEMPORARILY
            CMP RANDOM_NUMBER,4
            JLE CONT_FRUIT_SELECT
            MOV RANDOM_NUMBER, 4
            CONT_FRUIT_SELECT:
            
            MOV DX,RANDOM_NUMBER
            MOV CURRENT_FRUIT, DX
            ;MOV FRUIT_STARTPOS_Y, 21
            CALL DRAW_FRUIT
            ;A FRUIT IS FALLING NOW
            MOV CURRENT_FRUIT_STATUS, 1
        
        STILL_FALLING:
        ;CALLED EACH TIME TO MAKE FRUITS FALL 
            CALL FALLING_FRUTIS

            ;PRINT THE NUMBER OF LIVES 
            LEA SI, LIVES_STRING
            MOV AX,LIVES
            CALL HEX2ASCII
            PRINT_MESSAGE LIVES_STRING,H2A_STRING_SIZE,9,1,0FH

            ;PRINT THE SCORE 
            LEA SI, SCORE_STRING
            MOV AX,SCORE
            CALL HEX2ASCII
            PRINT_MESSAGE SCORE_STRING,H2A_STRING_SIZE,36,1,0FH

        ;CHECK IF THE USER PRESSED ESCAPE
        CMP EXIT_STATUS, 1
        JE RESTART_GAME
        
        ;CHECK IF THE PLAYER WON OR LOST OR NOT YET
        CMP PLAYER_LOST, 1
        JNE CHK_PLR_WON
        CALL WON_LOSE_INTERFACE
        JMP RESTART_GAME

        CHK_PLR_WON:
        CMP PLAYER_WON, 1
        JNE CONT_GAME
        CALL WON_LOSE_INTERFACE
        JMP RESTART_GAME

        CONT_GAME:

        ;DELAY A NUMBER OF SECONDS
            MOV AH, 86h 
            MOV CX, LOOP_DEL_UPPER    ;07
            MOV DX, LOOP_DEL_LOWER ;0a12
            INT 15h
    
    JMP MAIN_LOOP
    
    ;RESTARTS THE GAME
    RESTART_GAME:
    ;RESET THE GAME DATA
    CALL RESET_DATA
    CALL CLEARKEYBOARDBUFFER
    JMP BEGIN_GAME

    END_GAME:
    ;RETURN TO TEXT MODE
    MOV AL, 3
    MOV AH, 0
    INT 10H

    MOV AH,4CH
    INT 21H
MAIN ENDP

;-----------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------------
;   _____  _____       __          _______ _   _  _____   ______ _    _ _   _  _____ _______ _____ ____  _   _  _____ 
;  |  __ \|  __ \     /\ \        / /_   _| \ | |/ ____| |  ____| |  | | \ | |/ ____|__   __|_   _/ __ \| \ | |/ ____|
;  | |  | | |__) |   /  \ \  /\  / /  | | |  \| | |  __  | |__  | |  | |  \| | |       | |    | || |  | |  \| | (___  
;  | |  | |  _  /   / /\ \ \/  \/ /   | | | . ` | | |_ | |  __| | |  | | . ` | |       | |    | || |  | | . ` |\___ \ 
;  | |__| | | \ \  / ____ \  /\  /   _| |_| |\  | |__| | | |    | |__| | |\  | |____   | |   _| || |__| | |\  |____) |
;  |_____/|_|  \_\/_/    \_\/  \/   |_____|_| \_|\_____| |_|     \____/|_| \_|\_____|  |_|  |_____\____/|_| \_|_____/ 
;-----------------------------------------------------------------------------------------------------
;DRAWS THE CURRENT FRUIT
;PROVIDE THE FOLLOWING PARAMETERS
;-- FRUIT_START_X, FRUIT_START_Y
;-- CURRENT_FRUIT
DRAW_FRUIT PROC
    ;IF THE FRUIT IS A:
    ;TOMATO
    CMP CURRENT_FRUIT,1
    JNE ORNG
        LEA SI, TOMATO
    JMP END_DRAW_FRUIT
    ;ORANGE
    ORNG:
    CMP CURRENT_FRUIT, 2
    JNE LMN
        LEA SI, ORANGE
    JMP END_DRAW_FRUIT
    ;LEMON
    LMN:
    CMP CURRENT_FRUIT, 3
    JNE AVCDO
        LEA SI, LEMON

    JMP END_DRAW_FRUIT
    ;AVOCADO
    AVCDO:
        LEA SI,AVOCADO
END_DRAW_FRUIT:
    MOV BX, FRUIT_SIZE
    MOV CX, FRUIT_STARTPOS_X
    MOV DX, FRUIT_STARTPOS_Y
    CALL DRAW_OBJECT
RET
DRAW_FRUIT ENDP
;-----------------------------------------------------------------------------------------------------
;DRAW A TREE LINE AT TOP 
DRAW_TREE PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI

    ;SET X POSITION OF TREE 
    MOV CX,0
    ;SET Y POSITION OF TREE
    MOV DX, UPPER_BOUNDARY
    LEA SI, TREE
    MOV BX, TREE_SIZE
    MOV AX,32
    DRAW_TREE_LOOP:
    CALL DRAW_OBJECT
    ADD CX, 10
    DEC AX
    JNZ DRAW_TREE_LOOP
    
    POP SI        
    POP DX
    POP CX
    POP BX
    POP AX
RET
DRAW_TREE ENDP
;-----------------------------------------------------------------------------------------------------
;DRAW THE BACKGROUND AT FIRST 
DRAW_BCGRND PROC
PUSH AX
PUSH DX
PUSH CX

MOV CX, 0
MOV DX, UPPER_BOUNDARY
OUTER:

        INNER:
            MOV AH, 0CH
            MOV AL, 63H ;SKY COLOUR
            INT 10H
        INC CX
        CMP CX, 320
        JNE INNER
    ;RETURN CX TO THE BEGINNING OF THE NEXT ROW    
    MOV CX,0
    INC DX
    CMP DX,DOWN_BOUNDARY
    JNE OUTER

POP CX
POP DX 
POP AX   
RET 
DRAW_BCGRND ENDP
;-----------------------------------------------------------------------------------------------------
;CLEARS THE BASKET PREVIOUS LOCATION AND DRAWS A NEW ONE AT THE NEW LOCATION
DRAW_BASKET PROC
PUSH BX
PUSH CX
PUSH DX
PUSH SI
    ;CLEAR THE BASKET AT THE PREVIOUS LOCATION
    MOV BX, BASKET_SIZE
    MOV CX, BASKET_PREV_X
    MOV DX, BASKET_STARTPOS_Y
    LEA SI, BASKET
    CALL CLEAR_OBJECT
    ;DRAW THE PLAYER BASKET AT THE NEW POSTION
    LEA SI, BASKET
    MOV BX, BASKET_SIZE
    MOV CX, BASKET_STARTPOS_X
    MOV DX, BASKET_STARTPOS_Y
    CALL DRAW_OBJECT
POP SI
POP DX
POP CX
POP BX    
RET
DRAW_BASKET ENDP
;-----------------------------------------------------------------------------------------------------
;   ______ _____  _    _ _____ _______ 
;  |  ____|  __ \| |  | |_   _|__   __|
;  | |__  | |__) | |  | | | |    | |   
;  |  __| |  _  /| |  | | | |    | |   
;  | |    | | \ \| |__| |_| |_   | |   
;  |_|    |_|  \_\\____/|_____|  |_|  
;-----------------------------------------------------------------------------------------------------
;FRUIT MOTION
FALLING_FRUTIS PROC
PUSH BX
PUSH CX
PUSH DX
PUSH SI 
    ;CLEAR THE FRUIT AT THE PREVIOUS POSITION
    MOV BX, FRUIT_SIZE
    MOV CX, FRUIT_STARTPOS_X
    MOV DX, FRUIT_STARTPOS_Y
    ;GET THE OBJECT DATA TO BE CLEARED
    ;IF THE FRUIT IS A:
    ;TOMATO
    CMP CURRENT_FRUIT,1
    JNE ORNG1
        LEA SI, TOMATO
    JMP CONTINUE_CLEAR
    ;ORANGE
    ORNG1:
    CMP CURRENT_FRUIT, 2
    JNE LMN1
        LEA SI, ORANGE
    JMP CONTINUE_CLEAR
    ;LEMON
    LMN1:
    CMP CURRENT_FRUIT, 3
    JNE AVCDO1
        LEA SI, LEMON
    JMP CONTINUE_CLEAR
    ;AVOCADO
    AVCDO1:
        LEA SI,AVOCADO

    CONTINUE_CLEAR:    
    CALL CLEAR_OBJECT
    ;MOV THE FRUIT DOWN 
    ADD FRUIT_STARTPOS_Y,8
    ;CHECK FOR THE FRUIT HITTING
    MOV SI, DOWN_BOUNDARY
    ;DOWN_BOUNDARY - FRUIT POSTION
    SUB SI, FRUIT_STARTPOS_Y
    CMP SI,30
    JG KEEP_FALLING
        MOV CURRENT_FRUIT_STATUS, 0 ;A NEW FRUIT CAN BE CREATED
        MOV FRUIT_STARTPOS_Y,FRUITS_START_FALLING_POS
        ;CHECK IF THE FALLING FRUIT WAS THE ONE THAT SHOULD BE COLLECTED
        MOV BX, CURR_MES_NUM
        CMP BX, CURRENT_FRUIT
        JNE SAFE_HIT
            DEC LIVES
            CMP LIVES, 0
            JNE END_FALLING
                MOV PLAYER_LOST, 1
        SAFE_HIT:
        JMP END_FALLING
    KEEP_FALLING:
    CALL CHECK_BASKET_COLLISION
    ;IF COLLIDED DO NOT DRAW THE FRUIT AND CREATE A NEW FRUIT
    CMP CURRENT_FRUIT_STATUS, 0
    JE SKIP_BAS_COLL_CHECK
    ;FRUIT DID NOT COLLIDE WITH THE BASKET YET
    CALL DRAW_FRUIT
    JMP END_FALLING
    SKIP_BAS_COLL_CHECK:
    ;CHECK IF THE FRUIT IS NOT THE SAME KIND AS THE MESSAGE
        MOV BX, CURRENT_FRUIT
        CMP BX, CURR_MES_NUM
        JE CONTINUE_GAME
        ;IF NOT EQUAL : DEC THE LIVES 
            DEC LIVES
            CMP LIVES, 0
            JNE END_FALLING
                MOV PLAYER_LOST, 1
                JMP END_FALLING
            CONTINUE_GAME:
        ;IF EQUAL ; INC THE SCORE
                ADD SCORE,10
            
END_FALLING:
POP SI
POP DX
POP CX
POP BX
RET
FALLING_FRUTIS ENDP
;-----------------------------------------------------------------------------------------------------
;   ____           _____ _  ________ _______ 
;  |  _ \   /\    / ____| |/ /  ____|__   __|
;  | |_) | /  \  | (___ | ' /| |__     | |   
;  |  _ < / /\ \  \___ \|  < |  __|    | |   
;  | |_) / ____ \ ____) | . \| |____   | |   
;  |____/_/    \_\_____/|_|\_\______|  |_|   
;-----------------------------------------------------------------------------------------------------
;CHECKS THE COLLISION OF THE FRUIT WITH THE BASKET
CHECK_BASKET_COLLISION PROC
PUSH AX
PUSH BX
PUSH SI
PUSH DI
    ;COLLISION IN Y 
    ;GET DISTANCE BETWEEN CENTERS
    MOV SI, BASKET_HEIGHT
    SHR SI,1

    MOV BX, BASKET_STARTPOS_Y
    ;SKIP THE UPPER PART OF THE SQUARE
    MOV CX, BASKET_SIZE
    SHR CX, 1
    ;START_POS_Y + HALF THE BASKET SIZE + HALF THE DISTANCE TO ITS CENTER
    ADD BX, CX
    ADD BX, SI

    MOV DI, FRUIT_SIZE
    SHR DI,1
    ;FRUIT DISTANCE FROM CENTER + BASKET DIST FROM CENTER - 5 (ARBITRARY NUMBER TO MAKE COLL CLOSE TO BASKET)
    ADD SI,DI
    SUB SI, 10
    ;GET ACTUAL DISTANCE BETWEEN THEM
    MOV AX, FRUIT_STARTPOS_Y
    ;GET ACTUAL CENTER 
    ADD AX, DI
    ;BASKET_CENTER_Y - FRUIT_CENTER_Y
    SUB BX,AX

    ;COMPARE ACTUAL LENGTH TO CALCULATED LENGTH
    CMP BX , SI
    JG NOT_HITTING_BASKET
        ;REACHED THE BASKET IN Y CHECK FOR COLLISION IN X
        ;GET HALF THE FRUIT SIZE + HALF THE BASKET SIZE - 10 (TO MAKE COLLISION CLOSER)
        MOV DI, FRUIT_SIZE
        SHR DI, 1
        ;FRUIT_CENTER_X
        MOV SI, FRUIT_STARTPOS_X
        ADD SI, DI
        MOV BX, BASKET_SIZE
        SHR BX, 1
        ;BASKET CENTER X
        MOV AX, BASKET_STARTPOS_X
        ADD AX, BX
        ;CALCULATED DISTANCE
        ADD DI,BX
        SUB DI ,6
        ;GET ACTUAL DISTANCE IN Z BETWEEN CENTERS ABS(FRUIT_CENTER_X - BASKET_CENTER_X)
        CMP AX, SI
        JL BASKETX_LESS
            SUB AX, SI
            ;CHECK IF ACTUAL DISTANCE <= CALCULATED DISTANCE
            CMP AX, DI
            JG NOT_HITTING_BASKET
            JMP COLLISION_ACTION
        BASKETX_LESS:
            SUB SI, AX
            ;CHECK IF ACTUAL DISTANCE <= CALCULATED DISTANCE
            CMP SI, DI
            JG NOT_HITTING_BASKET
            ;THE FRUIT HIT THE BASKET
        COLLISION_ACTION:
             MOV CURRENT_FRUIT_STATUS, 0
             MOV FRUIT_STARTPOS_Y, FRUITS_START_FALLING_POS
          
    NOT_HITTING_BASKET:

POP DI
POP SI
POP BX
POP AX    
RET
CHECK_BASKET_COLLISION ENDP
;-----------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------------
;   _____ _   _       __   ____  _    _ _______ 
;  |_   _| \ | |     / /  / __ \| |  | |__   __|
;    | | |  \| |    / /  | |  | | |  | |  | |   
;    | | | . ` |   / /   | |  | | |  | |  | |   
;   _| |_| |\  |  / /    | |__| | |__| |  | |   
;  |_____|_| \_| /_/      \____/ \____/   |_|   
;-----------------------------------------------------------------------------------------------------
;DETERMINES THE ACTION TAKEN ACCORDING TO THE USER ACTION
GET_USR_INPUT PROC
PUSH AX
PUSH BX
PUSH DI
PUSH SI
    ;CHECK FOR USER INPUT
    MOV AH , 1
    INT 16H
    JZ NO_INPUT
    ;CONSUME THE TAKEN INPUT AND CLEAR BUFFER
    MOV AH, 0
    INT 16H

    CALL CLEARKEYBOARDBUFFER

    ;CHECK FOR THE INPUT TO TAKE ACTION
    ;RIGHT_ARROW
    CMP AH, 4DH
    JNE LEFT_ARROW
        ;STORE THE PREVIOUS POSTION FOR CLEARING
        MOV BX , BASKET_STARTPOS_X
        MOV BASKET_PREV_X, BX
        ;CHECK FOR HITTING THE RIGHT BOUNDARY
        MOV SI, RIGHT_BOUNDARY
        MOV DI, BASKET_STARTPOS_X
        ADD DI, BASKET_SIZE
        ;RIGHT_BOUNDARY - BASKET_STARTPOS_X < 16
        SUB SI,DI
        CMP SI, 10
        JLE SKIP_MOVING_RIGHT
            ;UPDATE THE BASKET POSITION 
            ADD BASKET_STARTPOS_X, 16
        SKIP_MOVING_RIGHT:
    JMP NO_INPUT

    LEFT_ARROW:
    CMP AH,4BH
    JNE EXIT
        ;STORE THE PREVIOUS POSTION FOR CLEARING
        MOV BX , BASKET_STARTPOS_X
        MOV BASKET_PREV_X, BX
        MOV SI, LEFT_BOUNDARY
        MOV DI, BASKET_STARTPOS_X
        ;BASKET_STARTPOSX - LEFT_BOUNDARY < 16 
        SUB DI,SI
        CMP DI, 7
        JLE SKIP_MOVING_LEFT
            ;UPDATE THE BASKET POSITION 
            SUB BASKET_STARTPOS_X, 16
        SKIP_MOVING_LEFT:    
        JMP NO_INPUT

    EXIT:
        CMP AL, 1BH
        JNE NO_INPUT
        MOV EXIT_STATUS,1    
NO_INPUT:
POP SI
POP DI
POP BX
POP AX     
RET
GET_USR_INPUT ENDP
;-----------------------------------------------------------------------------------------------------
;SELECTS A MESSAGE RANDOMLY TO DISPLAY TO THE USER
SELECT_MESSAGE PROC
PUSH SI
PUSH DI
    ;CHOOSE A MESSAGE RANDOMLY
    MOV SI,5
    MOV DI,1
    CALL GETRAND
    ;IF THE RANDOM NUBER IS GREATER THAN 4 SET TO 4 TEMPORARILY
    CMP RANDOM_NUMBER,4
    JLE CONT_MES_SELECT
        MOV RANDOM_NUMBER, 4
    CONT_MES_SELECT:
    
    MOV DI, RANDOM_NUMBER
    MOV CURR_MES_NUM,DI
    CMP CURR_MES_NUM,1
    JNE MESS_2
    PRINT_MESSAGE MES1, MES1_SIZE, 5, 23, 04H
    JMP END_MESSAGE_PICK
    MESS_2:
    CMP CURR_MES_NUM,2
    JNE MESS_3
    PRINT_MESSAGE MES2, MES2_SIZE, 5, 23, 2AH
    JMP END_MESSAGE_PICK
    MESS_3:
    CMP CURR_MES_NUM,3
    JNE MESS_4
    PRINT_MESSAGE MES3, MES3_SIZE, 5, 23, 0EH
    JMP END_MESSAGE_PICK
    MESS_4:
    PRINT_MESSAGE MES4, MES4_SIZE, 5, 23, 02H
    END_MESSAGE_PICK:
POP DI
POP SI    
RET
SELECT_MESSAGE ENDP
;-----------------------------------------------------------------------------------------------------
;   _____ _   _ _______ ______ _____  ______      _____ ______ 
;  |_   _| \ | |__   __|  ____|  __ \|  ____/\   / ____|  ____|
;    | | |  \| |  | |  | |__  | |__) | |__ /  \ | |    | |__   
;    | | | . ` |  | |  |  __| |  _  /|  __/ /\ \| |    |  __|  
;   _| |_| |\  |  | |  | |____| | \ \| | / ____ \ |____| |____ 
;  |_____|_| \_|  |_|  |______|_|  \_\_|/_/    \_\_____|______|
;-----------------------------------------------------------------------------------------------------
;MAIN MENU AND INTERFACE FUNCTION
INTERFACE PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
    BEGIN_INT:
    ;OPEN GRAPHICS MODE
    MOV AX, 0013H
    INT 10H
    ;DRAW TREES ON TOP
    MOV CX, 0
    MOV DX, 0
    MOV BX, TREE_SIZE
    LEA SI, TREE
    MOV AX, 32
    UPPER_TREE:
        CALL DRAW_OBJECT
        ADD CX, 10
        DEC AX 
    JNE UPPER_TREE

    ;WELCOME TO FRUIT BASKET
    PRINT_MESSAGE WEL_MES, WEL_SIZE, 8,5,0EH
    ;PRESS ANY KEY TO START PLAYING
    PRINT_MESSAGE PRESS_MES, PRESS_MES_SIZE, 10, 18, 04H
    ;PRESS I FOR INSTRUCTIONS
    PRINT_MESSAGE INST_MES, INST_MES_SIZE, 9, 20, 0FH
    ;PRESS ESC TO EXIT
    PRINT_MESSAGE ESC_MES, ESC_MES_SIZE, 12, 22, 02H
    
    ;DELAY A NUMBER OF SECONDS
        MOV AH, 86h 
        MOV CX, 07H
        MOV DX, 0A120H
        INT 15h
    
    ;DRAW THE BASKET AND FRUITS
    LEA SI, BASKET
    MOV BX, BASKET_SIZE
    MOV CX, 132
    MOV DX, 35
    CALL DRAW_OBJECT

    ;DELAY A NUMBER OF SECONDS
        MOV AH, 86h 
        MOV CX, 07H
        MOV DX, 0A120H
        INT 15h
    
    ;DRAW FRUITS 
    LEA SI, TOMATO
    MOV BX, FRUIT_SIZE
    MOV CX, 130
    MOV DX, 102
    CALL DRAW_OBJECT

    ;DELAY A NUMBER OF SECONDS
        MOV AH, 86h 
        MOV CX, 07H
        MOV DX, 0A120H
        INT 15h
    
    LEA SI, ORANGE
    MOV BX, FRUIT_SIZE
    MOV CX, 165
    MOV DX, 102
    CALL DRAW_OBJECT

    ;DELAY A NUMBER OF SECONDS
        MOV AH, 86h 
        MOV CX, 07H
        MOV DX, 0A120H
        INT 15h
    
    LEA SI, LEMON
    MOV BX, FRUIT_SIZE
    MOV CX, 198
    MOV DX, 102
    CALL DRAW_OBJECT

    ;DELAY A NUMBER OF SECONDS
        MOV AH, 86h 
        MOV CX, 07H
        MOV DX, 0A120H
        INT 15h
    
    LEA SI, AVOCADO
    MOV BX, FRUIT_SIZE
    MOV CX, 95
    MOV DX, 102
    CALL DRAW_OBJECT

   ;WAIT FOR PRESSING ANY KEY
    MOV AH, 0
    INT 16H
    ;CHECK IF THE KEY IS I FOR INSTRUCTIONS
    CMP AL, 'i'
    JNE CHECK_CAPITAL_I
        CALL INSTRUCTIONS
        CALL FRUIT_DATA_INT
        JMP BEGIN_INT
    CHECK_CAPITAL_I:
    CMP AL, 'I'
    JNE CHCK_EXIT_FROM_INT
        CALL INSTRUCTIONS 
        CALL FRUIT_DATA_INT
        JMP BEGIN_INT

    CHCK_EXIT_FROM_INT:
    ;CHECK IF THE KEY IS THE ESCAPE KEY
    CMP AL, 1BH
    JNE EXIT_GAME_MEN
        MOV EXIT_STATUS, 1
    EXIT_GAME_MEN:
POP DX
POP CX
POP BX
POP AX
RET
INTERFACE ENDP
;-----------------------------------------------------------------------------------------------------
;DRAW YOU WON / LOST INTERFACE
WON_LOSE_INTERFACE PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH DI
    ;GET SYSTEM TIME
    MOV AH, 2CH
    INT 21H
    MOV PREV_SYS_SEC, DH
    ;WAIT FOR TEN SECONDS
    MOV DI, 10
    MOV MES_COLOR, 1

    INTER_LOOP:
        
        WAIT_SEC:
        ;GET THE SYSYTEM SECOND AGAIN
        MOV AH, 2CH
        INT 21H
        ;CMP WITH THE PREVIOUS SYSTEM TIME
        CMP DH, PREV_SYS_SEC
        JE WAIT_SEC

        ;UPDATE THE NEW PREV_SYS_SECOND
        MOV PREV_SYS_SEC, DH
        ;CHANGE COLOR
        INC MES_COLOR
        ;CHECK IF THE PLAYER LOST
        CMP PLAYER_LOST,1
        JNE PLR_WON
            PRINT_MESSAGE LOSE_MES, LOSE_MES_SIZE, 15, 12, MES_COLOR
            JMP END_INTERFACE
        ;CHECK IF THE PLAYER WON
        PLR_WON:
            PRINT_MESSAGE WON_MES, WON_MES_SIZE, 14, 12, MES_COLOR
        END_INTERFACE:

        DEC DI
    JNZ INTER_LOOP
        ;RESET MES_COLOR
        MOV MES_COLOR, 1
POP DI
POP DX
POP CX
POP BX
POP AX        
RET
WON_LOSE_INTERFACE ENDP
;-----------------------------------------------------------------------------------------------------
FRUIT_DATA_INT PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH SI
    ;OPEN GRAPHICS MODE
    MOV AX, 0013H
    INT 10H
    ;PRINT TOMATO WORD AND IMAGE
    PRINT_MESSAGE TOM_WRD, TOM_WRD_SIZE, 5,3,04H
    LEA SI, TOMATO
    MOV BX, FRUIT_SIZE
    MOV CX, 96
    MOV DX, 16
    CALL DRAW_OBJECT 
    ;PRINT ORANGE WORD AND IMAGE
    PRINT_MESSAGE ORNG_WRD, ORNG_WRD_SIZE, 5,8,2AH
    LEA SI, ORANGE
    MOV BX, FRUIT_SIZE
    MOV CX, 96
    MOV DX, 56
    CALL DRAW_OBJECT
    ;PRINT LEMON WORD AND IMAGE
    PRINT_MESSAGE LMN_WRD, LMN_WRD_SIZE, 5,13,0EH
    LEA SI, LEMON
    MOV BX, FRUIT_SIZE
    MOV CX, 96
    MOV DX, 96
    CALL DRAW_OBJECT
    ;PRINT AVOCADO WORD AND IMAGE
    PRINT_MESSAGE AVC_WRD, AVC_WRD_SIZE, 5,18,02H
    LEA SI, AVOCADO
    MOV BX, FRUIT_SIZE
    MOV CX, 96
    MOV DX, 136
    CALL DRAW_OBJECT

    ;PRESS ANY KEY TO RETURN MESSAGE
    PRINT_MESSAGE RET_FRM_INS_MES,RET_FRM_INS_MES_SIZE,5, 23, 0FH
    ;WAIT TO PRESS ANY KEY TO RETURN
    MOV AH, 0
    INT 16H
    CALL CLEARKEYBOARDBUFFER
POP SI
POP DX
POP CX
POP BX
POP AX
RET
FRUIT_DATA_INT ENDP
;-----------------------------------------------------------------------------------------------------
;START MENU INSTRUCTIONS
INSTRUCTIONS PROC
    ;OPEN TEXT MODE
    MOV AX, 0003H
    INT 10H

    MOV SI, OFFSET MES
    LODSB
    
    TYPE_MES:
        ;PRINT THE CHARACTER ON THE SCREEN
        MOV AH,2
        MOV DL,AL
        INT 21H
        ;MAKE A SMALL TIME DELAY
        MOV CX,0FFFFh
        DELAY1:NOP
        LOOP DELAY1

        MOV CX,0FFFFh
        DELAY2:NOP
        LOOP DELAY2

        MOV CX,0FFFFh
        DELAY3:NOP
        LOOP DELAY3
        
        ;LOAD ANOTHER CHARACTER
        LODSB
        CMP AL,'$'
    JNE TYPE_MES
    ;WAIT FOR THE PLAYER TO PRESS ANY KEY 
    MOV AH,0
    INT 16H
    RET
INSTRUCTIONS ENDP
;-----------------------------------------------------------------------------------------------------
;RESETS THE GAME DATA
RESET_DATA PROC
    MOV LIVES, 3
    MOV SCORE, 0
    MOV FRUIT_STARTPOS_Y, FRUITS_START_FALLING_POS
    MOV BASKET_STARTPOS_X, 160
    MOV PLAYER_LOST, 0
    MOV PLAYER_WON, 0
    MOV EXIT_STATUS, 0
    MOV TIME, 60
    ;MOV MES_COUNTER, 15
RET
RESET_DATA ENDP
;-----------------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------------
;   _    _ ______ _      _____  ______ _____    ______ _    _ _   _  _____ _______ _____ ____  _   _  _____ 
;  | |  | |  ____| |    |  __ \|  ____|  __ \  |  ____| |  | | \ | |/ ____|__   __|_   _/ __ \| \ | |/ ____|
;  | |__| | |__  | |    | |__) | |__  | |__) | | |__  | |  | |  \| | |       | |    | || |  | |  \| | (___  
;  |  __  |  __| | |    |  ___/|  __| |  _  /  |  __| | |  | | . ` | |       | |    | || |  | | . ` |\___ \ 
;  | |  | | |____| |____| |    | |____| | \ \  | |    | |__| | |\  | |____   | |   _| || |__| | |\  |____) |
;  |_|  |_|______|______|_|    |______|_|  \_\ |_|     \____/|_| \_|\_____|  |_|  |_____\____/|_| \_|_____/ 
;-----------------------------------------------------------------------------------------------------
;I THINK TAKEN FROM MAZIDI REFERENCE (WE USED IT IN ASSIGNMENT 3) - MODIFIED BY ME
;PUT NUMBER TO BE PRINTED IN AX
;PUT IN SI OFFSET OF STRING TO STORE NUMBER ASCII
;MOV STRING SIZE IN H2A_STRING_SIZE
HEX2ASCII PROC 
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH SI
    MOV CX, 0
    MOV BX, 10
    ;LOOP1 SEPERATES THE DIGITS OF THE NUMBER AND STORES IN THE STACK
    LOOP1: 
    MOV DX,0
    DIV BX
    ;REMAINDER IN DL
    ADD DL, 30H
    PUSH DX
    INC CX
    CMP AX, 9
    JG LOOP1

    ADD AL,30H
    MOV [SI], AL

    ;STORE THE STRING SIZE TO USE IN PRINTING INTERUPT
    MOV H2A_STRING_SIZE, CX
    INC H2A_STRING_SIZE
    ;LOOP2 POPS FROM STACK COVERTS TO ASCII THEN STORES IN MEMORY
    LOOP2: 
    POP AX
    INC SI
    MOV [SI], AL
    LOOP LOOP2

    INC SI
    MOV BYTE PTR [SI], '$'
POP SI
POP DX
POP CX
POP BX
POP AX
RET
HEX2ASCII    ENDP
;-----------------------------------------------------------------------------------------------------
;A TEMPORARY GET RANDOM FUNCTION
;Get a Random number within a certain range
;SI, UPPER DI, LOWER
;RETURN THE RANDOM NUMBER IN RANDOM_NUMBER
GETRAND proc
PUSH SI
PUSH DI
PUSH AX
PUSH BX
PUSH CX
PUSH DX
    
; ;GET THE SEED VALUE FROM NUMBER OF SECONDS
; MOV AH, 2CH
; INT 21H
MOV DH, SEED
;CHANGE THE SEED EVERY TIME
ADD DH, 19
MOV SEED, DH ;UPDATE THE SEED FOR THE NEXT PROCESS

;GET UPPER - LOWER + 1
SUB SI, DI
INC SI
;DH = SECONDS
;LOWER + (SECONDS % (UPPER - LOWER + 1))
MOV AH,DH
MOV AL,0
XOR DX,DX

DIV SI  ;DX = DX:AX % SI

ADD DX, DI
MOV RANDOM_NUMBER,DX

POP DX
POP CX
POP BX 
POP AX
POP DI
POP SI    
RET     
GETRAND ENDP
;-----------------------------------------------------------------------------------------------------
;READY INSTRUCTION TO CLEAR KEY BOARD BUFFER TAKEN FROM : REFERENCE
CLEARKEYBOARDBUFFER		PROC 
	PUSH		AX
	PUSH		ES
	MOV		AX, 0000H
	MOV		ES, AX
	MOV		ES:[041AH], 041EH
	MOV		ES:[041CH], 041EH				; CLEARS KEYBOARD BUFFER
	POP		ES
	POP		AX
	RET
CLEARKEYBOARDBUFFER		ENDP
;-----------------------------------------------------------------------------------------------------
;SI: OFFSET OF DATA TO BE DRAWN
;BX: SIZE OF THE OBJECT TO BE DRAWN
;CX: START_POS_X
;DX: START_POS_Y
DRAW_OBJECT PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI
    PUSH DI
    PUSH BP

    ;ADD THE SIZE TO THE STAARTING X AND Y OF THE OBJECT
    MOV BP, BX
    ADD BX, CX
    ADD BP, DX 
    
    ;STORE THE START X POS 
    MOV DI, CX
    
    ;LEA SI, ORANGE

    CUR_DRW_ROW:

        CUR_DRW_COL:
            
            ;MOVES THE COLOR FROM DS:SI TO AL
            LODSB
            MOV AH,0CH
            ;IF THE PIXEL IS BLACK DON'T DRAW BLACK = TRANSPARENT
            CMP AL ,0
            JE SKIP_DRAW
            INT 10H
            SKIP_DRAW:
        INC CX
        CMP CX, BX
        JNE CUR_DRW_COL
    ;RETURN CX TO THE BEGINNING OF THE NEXT ROW    
    MOV CX,DI
    INC DX
    CMP DX,BP
    JNE CUR_DRW_ROW
    
    POP BP
    POP DI
    POP SI
    POP DX
    POP CX
    POP BX
    POP AX
    RET
DRAW_OBJECT ENDP
;-----------------------------------------------------------------------------------------------------
;CLEAR OBJECT BY DRAWING THE SAME OBJECT BUT WITH THE CLEAR COLOR
;GIVEN OBJECT_SIZE IN BX
;SI: OFFSET OF THE OBJECT TO BE CLEARED
;CX: X POS OF OBJECT TO BE CLEARED
;DX: Y POSS OF OBJECT TO BE CLEARED
CLEAR_OBJECT PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI
    PUSH DI
    PUSH BP

    ;ADD THE SIZE TO THE STAARTING X AND Y OF THE OBJECT
    MOV BP, BX
    ADD BX, CX
    ADD BP, DX 
    
    ;STORE THE START X POS 
    MOV DI, CX
    
   CUR_CLR_ROW:

        CUR_CLR_COL:
            
            ;MOVES THE COLOR FROM DS:SI TO AL
            LODSB
            MOV AH,0CH
            ;IF THE PIXEL IS BLACK DON'T DRAW BLACK = TRANSPARENT
            CMP AL ,0
            JE SKIP_CLR
            MOV AL, 63H  ;OVERWRITE WITH THE CLEAR COLOR
            INT 10H
            SKIP_CLR:
        INC CX
        CMP CX, BX
        JNE CUR_CLR_COL
    ;RETURN CX TO THE BEGINNING OF THE NEXT ROW    
    MOV CX,DI
    INC DX
    CMP DX,BP
    JNE CUR_CLR_ROW
    
    POP BP
    POP DI
    POP SI
    POP DX
    POP CX
    POP BX
    POP AX
    RET
CLEAR_OBJECT ENDP
;-----------------------------------------------------------------------------------------------------
;BL : COLOR
;AL: CHAR TO BE PRINTED
;PRINT A CHARACTER
PRINT_CHAR PROC
PUSH AX
PUSH BX
  
    MOV AH, 0EH
    MOV AL, 07H
    MOV BH, 0
    MOV BL, 0FH
    INT 10H

POP BX
POP AX    
RET
PRINT_CHAR ENDP
;-----------------------------------------------------------------------------------------------------
PRINT_TIME PROC
PUSH AX
PUSH SI
    ;PRINT THE TIME 
    MOV AX, TIME
    LEA SI, TIME_STRING
    CALL HEX2ASCII
    MOV MES_COLOR, 0FH
    ;IF TIME IS 99 PRINT A CLEARING STRING BEFORE PRINTING THE TIME
    CMP TIME, 99
    JNE SKIP_CLEARING
        PRINT_MESSAGE CLEAR_STRING, CLEAR_STRING_SIZE, 18, 1, MES_COLOR
    SKIP_CLEARING:
    ;PRINT LAST TEN SECONDS IN RED
    CMP TIME, 10
    JG SKIP_RED_COLORING
        MOV MES_COLOR, 04H
    SKIP_RED_COLORING:
    PRINT_MESSAGE TIME_STRING,H2A_STRING_SIZE, 19, 1, MES_COLOR 
POP SI
POP AX    
RET 
PRINT_TIME ENDP
END MAIN